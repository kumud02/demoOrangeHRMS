version: 2.1
orbs:
  browser-tools: circleci/browser-tools@1.2.3
  allure: ayte/allure@0.1.3

parameters:
  account:
    type: string
    default: celsius

commands:
  assume-qa-role:
    parameters:
      tier:
        type: string
    steps:
      - aws-cli/install
      - attach_workspace:
          at: ~/workspace
      - aws-auth/restore-credentials:
          workspace-folder-name: aws-auth-<< parameters.tier >>
      - run:
          name: Prepare $ROLE_ARN for QA Role to Assume
          command: |
            aws sts get-caller-identity | jq '.'
            AWS_ACCOUNT=$(aws sts get-caller-identity | jq -r '.Account')
            ROLE_ARN="arn:aws:iam::${AWS_ACCOUNT}:role/carrier-digital-celsius-qa-api-<< parameters.tier >>"
            echo "export ROLE_ARN=${ROLE_ARN}" >> $BASH_ENV
      - aws-auth/assume-role:
          session-name: qa-api-test-role-session
          output-folder-name: aws-auth-<< parameters.tier >>-qa-api-role
      - aws-auth/restore-credentials:
          workspace-folder-name: aws-auth-<< parameters.tier >>-qa-api-role
      - run:
          name: Validate QA Role
          command: aws sts get-caller-identity | jq '.'

jobs:
  setup-credentials:
    executor: aws-cli/default
    resource_class: small
    parameters:
      account:
        type: string
      tier:
        type: string
    steps:
      - attach_workspace:
          at: ~/workspace
      - checkout
      - aws-cli/install
      - aws-ssm/get-ssm-secrets:
          export-envar-file: ./ssm-secrets.envars
          parameter-filter: /carrier-digital/deployment-administration/<< parameters.account >>/<< parameters.tier >>/iam/role/carrier-digital-deployment-role
          parameter-map-file: none
      - aws-auth/assume-role:
          session-name: qa-api-test-role-session
          output-folder-name: aws-auth-<< parameters.tier >>
          export-envar-file: ./ssm-secrets.envars
      - aws-auth/ca-login:
          tool: all
          output-folder-name: aws-auth-<< parameters.tier >>
      - persist_to_workspace:
          root: ~/workspace
          paths:
            - ./*
  runway-deploy:
    docker:
      - image: cimg/python:3.8.9-node
    resource_class: small
    parameters:
      runway-directory:
        type: string
      tier:
        type: string
      region:
        type: string
        default: "us-east-1"
    steps:
      - checkout
      - aws-cli/install
      - attach_workspace:
          at: ~/workspace
      - aws-auth/restore-credentials:
          workspace-folder-name: aws-auth-<< parameters.tier >>
      - restore_cache:
          name: Restoring pip cache
          key: &pipcachekey pipcache-v4-pyv3-8-9-{{ checksum "Pipfile.lock" }}
      - run:
          name: Pipenv Sync
          command: |
            pip install pipenv
            pipenv sync
      - save_cache:
          key: *pipcachekey
          paths:
            - ".venv"
      - run:
          name: Runway deploy
          working_directory: << parameters.runway-directory >>
          no_output_timeout: 10m
          environment:
            AWS_DEFAULT_REGION: << parameters.region >>
          command: |
            DEPLOY_ENVIRONMENT=<< parameters.tier >> pipenv run runway deploy
  run-tests:
    docker:
      - image: cimg/openjdk:<< parameters.jdk_version >>
    resource_class: << parameters.resource_class >>
    parameters:
      resource_class:
        type: string
        default: small # [ medium large xlarge 2xlarge]
      jdk_version:
        type: string
        default: "16.0"
      tier:
        type: string
        default: qa
      region:
        type: string
        default: "us-east-1"
    steps:
      - checkout
      - assume-qa-role:
          tier: << parameters.tier >>
      - run:
          name: Run tests
          environment:
            AWS_REGION: << parameters.region >>
          command: mvn test -pl qa-automation-celsius-api -am -DfailIfNoTests=false -Dtest=TimestreamTest#detectTooOldTimestreamDates -Dlynx.env=<< parameters.tier >> -Dlynx.aqa.prefix=LYNXFLTAQAAPI
      #- slack/notify:
      #    channel: $SLACK_ALERTS_CHANNEL
      #    event: fail
      #    template: basic_fail_1
      #    mentions: '@here'
  run-simulator:
    docker:
      - image: cimg/openjdk:<< parameters.jdk_version >>
    resource_class: << parameters.resource_class >>
    parameters:
      resource_class:
        type: string
        default: small # [ medium large xlarge 2xlarge]
      jdk_version:
        type: string
        default: "16.0"
      tier:
        type: string
        default: qa
      region:
        type: string
        default: "us-east-1"
    steps:
      - checkout
      - assume-qa-role:
          tier: << parameters.tier >>
      - run:
          name: Run tests
          environment:
            AWS_REGION: << parameters.region >>
          command: mvn test -pl qa-automation-celsius-api -am -DfailIfNoTests=false -Dtest=DeviceSimulator#runSimulation -Dlynx.env=<< parameters.tier >> -Dlynx.aqa.prefix=LYNXFLTAQAAPI
          no_output_timeout: 120m
  run-tests-api:
    docker:
      - image: cimg/openjdk:<< parameters.jdk_version >>
    resource_class: << parameters.resource_class >>
    parameters:
      resource_class:
        type: string
        default: small # [ medium large xlarge 2xlarge]
      jdk_version:
        type: string
        default: "16.0"
      tier:
        type: string
        default: qa
      region:
        type: string
        default: "us-east-1"
    steps:
      - checkout
      - assume-qa-role:
          tier: << parameters.tier >>
      - run:
          name: Run tests
          environment:
            AWS_REGION: << parameters.region >>
          command: mvn test -pl qa-automation-celsius-api -am -DfailIfNoTests=false -Dlynx.aqa.prefix=LYNXFLTAQAAPI -Dlynx.env=<< parameters.tier >>
      - run:
          name: Build report
          environment:
            AWS_REGION: << parameters.region >>
          command: mvn allure:report
          when: always
      - store_artifacts:
          path: target/site/allure-maven-plugin
          destination: allure
  run-tests-ui:
    docker:
      - image: cimg/openjdk:<< parameters.jdk_version >>
    resource_class: << parameters.resource_class >>
    parameters:
      resource_class:
        type: string
        default: large # [ medium large xlarge 2xlarge]
      jdk_version:
        type: string
        default: "16.0-browsers"
      tier:
        type: string
        default: qa
      region:
        type: string
        default: "us-east-1"
    steps:
      - browser-tools/install-chrome
      - run:
          command: google-chrome --version
          name: Check install
      - checkout
      - assume-qa-role:
          tier: << parameters.tier >>
      - run:
          name: Run tests
          environment:
            AWS_REGION: << parameters.region >>
          command: mvn test -pl qa-automation-celsius-ui -am -DfailIfNoTests=false -Dlynx.aqa.prefix=LYNXFLTAQAUI -Dlynx.env=<< parameters.tier >>
      - run:
          name: Build report
          environment:
            AWS_REGION: << parameters.region >>
          command: mvn allure:report
          when: always
      - store_artifacts:
          path: target/site/allure-maven-plugin
          destination: allure
workflows:
  security:
    jobs:
      - setup-credentials: &setupdeploycreds
          name: Setup Credentials << matrix.tier >>
          account: << pipeline.parameters.account >>
          matrix: &securitytiers
            parameters:
              tier: ["qa", "prod"]
          context:
            - "AWS_DIGITAL_DEPLOYMENT_USER"
            - "AWS_IOT_CODEARTIFACT"
          filters:
            branches:
              only:
                - develop
      - runway-deploy:
          name: Deploy Test Role << matrix.tier >>
          matrix: *securitytiers
          runway-directory: ~/project/runway
          requires:
            - Setup Credentials << matrix.tier >>
  timestream:
    jobs:
      - setup-credentials:
          <<: *setupdeploycreds
          matrix:
            parameters: &timestream
              tier: ["prod"]
      - run-tests:
          name: Run Tests << matrix.tier >> << matrix.region >>
          matrix:
            parameters:
              <<: *timestream
              region: ["eu-west-1"]
            ######################################################
            #   THIS BLOCK SHOWS HOW TO EXCLUDE REGIONS AND TIERS THAT ARE INCOMPATIBLE
            #   THE TIER MATRIX IN THE SETUP CREDENTIALS JOB WOULD NEED TO HAVE ALL TIERS
            #   region: ["eu-west-1","us-east-1"]
            # exclude:
            #   - tier: "prod"
            #     region: "us-east-1"
            #   - tier: "qa"
            #     region: "eu-west-1"
            ######################################################
          context: SLACK
          requires:
            - Setup Credentials << matrix.tier >>
    triggers:
      - schedule:
          cron: "0,10,20,30,40,50 * * * *"
          filters:
            branches:
              only: develop
  regression-api:
    jobs:
      - setup-credentials: &setupdeploycreds
          name: Setup Credentials << matrix.tier >>
          account: << pipeline.parameters.account >>
          matrix:
            parameters: &regression-api
              tier: ["qa"]
          context:
            - "AWS_DIGITAL_DEPLOYMENT_USER"
            - "AWS_IOT_CODEARTIFACT"
      - run-tests-api:
          name: Run Tests << matrix.tier >>
          matrix:
            parameters:
              <<: *regression-api
              region: ["us-east-1"]
          context: SLACK
          requires:
            - Setup Credentials << matrix.tier >>
    triggers:
      - schedule:
          cron: "0 0,12 * * *"
          filters:
            branches:
              only: develop
  regression-ui:
    jobs:
      - setup-credentials: &setupdeploycreds
          name: Setup Credentials << matrix.tier >>
          account: << pipeline.parameters.account >>
          matrix:
            parameters: &regression-ui
              tier: ["qa"]
          context:
            - "AWS_DIGITAL_DEPLOYMENT_USER"
            - "AWS_IOT_CODEARTIFACT"
          filters:
            branches:
              only:
                - develop
      - run-tests-ui:
          name: Run Tests << matrix.tier >>
          matrix:
            parameters:
              <<: *regression-ui
              region: ["us-east-1"]
          context: SLACK
          requires:
            - Setup Credentials << matrix.tier >>
          filters:
            branches:
              only:
                - develop
  simulator:
    jobs:
      - setup-credentials: &setupdeploycreds
          name: Setup Credentials << matrix.tier >>
          account: << pipeline.parameters.account >>
          matrix:
            parameters: &simulator
              tier: ["qa"]
          context:
            - "AWS_DIGITAL_DEPLOYMENT_USER"
            - "AWS_IOT_CODEARTIFACT"
      - run-simulator:
          name: Run Tests << matrix.tier >>
          matrix:
            parameters:
              <<: *simulator
              region: ["us-east-1"]
          context: SLACK
          requires:
            - Setup Credentials << matrix.tier >>
    triggers:
      - schedule:
          cron: "55 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23 * * *"
          filters:
            branches:
              only: develop