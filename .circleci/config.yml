version: 2 # use CircleCI 2.0

orbs:
   browser-tools: circleci/browser-tools@1.1
   allure: ayte/allure@0.1.3

description: Allure Parametes Configurations
parameters:
  configuration-path:
    description: 'Path to Allure configuration, uses default one if omitted'
    type: string
    default: /usr/local/share/allure/config/allure.yml
  target-path:
    description: Path for report directory
    type: string
    default: allure-report
  results-path:
    description: Path to directory with test results
    type: string
    default: allure-results
  artifact-path:
    description: Path that will be used when storing result as artifact
    type: string
    default: Report/Allure

commands:
  install:
    description: Installs Allure Framework and registers it as /usr/local/bin/allure
    parameters:
      version:
        description: Allure version to use
        type: string
        default: 2.13.1
    steps:
      - run:
          name: Allure archive download
          command: curl -L https://github.com/allure-framework/allure2/releases/download/<< parameters.version >>/allure-commandline-<< parameters.version >>.zip -o /project/allure.zip
      - run:
          name: Archive extraction
          command: unzip /project/allure.zip
      - run:
          name: Allure installation
          command: sudo mv allure-<< parameters.version >> /usr/local/share/allure
      - run:
          name: Allure binary symlinking
          command: sudo ln -s /usr/local/share/allure/bin/allure /usr/local/bin/allure

jobs: # a collection of steps
  build: # runs not using Workflows must have a `build` job as entry point
 
    # working_directory: ~/demoOrangeHRMS # directory where steps will run
 
    docker: # run the steps with Docker
      # - image: cimg/openjdk:18.0.1
      - image: circleci/openjdk:8-jdk-browsers # ...with this image as the primary container; this is where all `steps` will run

    environment:       
       MAVEN_OPTS: -Xmx3200m   # Customize the JVM maximum heap limit
    
    
    steps: # a collection of executable commands
 
      - checkout: # check out source code to working directory
          path: ~/project
 
      - restore_cache:
          keys:
            - v1-dependencies-{{ checksum "pom.xml" }}
            # fallback to using the latest cache if no exact match is found
            - v1-dependencies-
      - run: mvn dependency:go-offline

      - save_cache:
          paths:
            - ~/.m2
          key: v1-dependencies-{{ checksum "pom.xml" }}

 
      - run: mvn clean test # run the actual tests

  
      - store_test_results: # uploads the test metadata from the `target/surefire-reports` directory so that it can show up in the CircleCI dashboard.
          path: target/surefire-reports

      - run: 'curl -H "Content-Type: multipart/form-data" -u $jira_user:$jira_password -F "file=@target/surefire-reports/testng-results.xml" "$jira_server_url/rest/raven/1.0/import/execution/testng?projectKey=TPSF"'

      - run: 'curl -H "Content-Type: multipart/form-data" -u admin:admin -F "file=@report.xml" https://testamplify.atlassian.net/rest/raven/1.0/import/execution/testng?projectKey=TPSF'

      - run:
          name: Creating Dummy Artifacts
          command: |
            echo "my artifact file" > /project/art-1;
            mkdir /project/artifacts;
            echo "my artifact files in a dir" > /project/artifacts/art-2;

    
      - run:
          name: Allure archive download
          command: >-
            curl -L https://github.com/allure-framework/allure2/releases/download/<<
            parameters.version >>/allure-commandline-<< parameters.version >>.zip -o
            /project/allure.zip
      - run:
          name: Archive extraction
          command: unzip /project/allure.zip
      - run:
          name: Allure installation
          command: sudo mv allure-<< parameters.version >> /usr/local/share/allure

      - run:
          name: Allure report generation (<< parameters.results-path >> -> << parameters.target-path >>)
          command: |
            allure generate \
              --config << parameters.configuration-path >> \
              --report-dir << parameters.target-path >> \
              << parameters.results-path >>

      - store_artifacts:
          path: << parameters.target-path >>
          destination: << parameters.artifact-path >>
     